print "*******************************"
print "********* DECLARATION *********"
print "*******************************"
//types
print "******* create c **********"
char c
c = 'c'
print c
show c



print "******* create c2 **********"
char c2 = 'd'
print c2
show c2

print "******* create c3 **********"
char c3 = c
c3 = c2
print c3
show c3

print "******* create all types **********"

bool b = true //false
int i = 42
float f = 43.2
string s = "string_test"

auto n = null
auto test = 68
auto test = n //change type


//tuple l = (42,"13","srn",63.5)
//tab t //= [44,43.5,"test"]
//dict di //= {"blah" : 44, "bhal2" : 54.8, "blah3" : "truc"}

show

print "********** delete test,s, c2,c3 *************"

delete test
delete s
delete c2
delete c3

print "******* double declaration of i (will make a error) **********"
int i = 72


print "******* clean context ********************"
delete *

print "************* multiple declaration **************"
bool b1 b2 b3 = char c1 c2 c3 = int i1 i2 i3 = float f1 f2 f3 = string s1 s2 s3 = auto a1 a2 a3 = "43.9"

print "test",string b = 42

show

print "******* clean context ********************"
delete *

print "*******************************"
print "*********** MATHS *************"
print "*******************************"

print "====== int ======"
print "1+2", 1+2
//print "1-2", 1-2
//print "1*2", 1*2
//print "1/2", 1/2

print "====== float ======"
//print "1/2.0", 1/2.0


print "*******************************"
print "******* COMPILATION ***********"
print "*******************************"

////compilation
compile "f.cpp" as libf
//delete libf

string file = "f.cpp"

compile file, "f2.cpp" with flags("-o3","-Wall") link("utils") as libf2


print "*******************************"
print "********** IMPORT *************"
print "*******************************"

file = "./libf"
import file as test_f //import compiled lib

from test_f import int "test_print" as test_print

print test_print //function
show test_print //type : function, return: ???, param: ???

print test_print(789)

auto res = test_print(1)
show res

print "*******************************"
print "********** BUILTINS ***********"
print "*******************************"
////run
//run p(42) //synchon
//run p(i) //synchon
//run p(test) //synchon
//run p(1) as thread_p //asynchone
//
//thread_p.join() //synchonisation
//
//run p(2) as thread_p //asynchone
//thread_p.detach() //relase it
//
//delete thread_p
//
//run p(3) as detached //asynchone
//
//
//
////extern source
//wget "127.0.0.1:8000/test.cpp" as wget_file
//source "file.icpp"
//string source_file = "file.icpp"
//source source_file
//
//compile "127.0.0.1:8000/test.cpp" as libf5

print "******** help *******"
help
print "******** exit *******"
exit
