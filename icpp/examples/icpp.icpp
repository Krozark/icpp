//types
char c = 'c'
c2 = 'c'

print c
show c

print c2
show c2
//bool b = true //false
//int i = 42
//float f = 43.2
//string s = "string_test"
//auto n = null
//auto test = 68
//
//tuple l = (42,"13","srn",63.5)
//tab t //= [44,43.5,"test"]
//dict di //= {"blah" : 44, "bhal2" : 54.8, "blah3" : "truc"}
//
//
//// import
//from "f.cpp" import print as p
//print p //function
//show p //type : function, return: ???, param: ???
//
//from "f.cpp" import int print(int) as p
//print p //function
//show p //type : function, return: int, param: (int)
//
//from "f.cpp" import int print(int*)
//from "f.cpp" import int print(const string&)
//from "f.cpp" import int print(int**)
//from "f.cpp" import int print(int***)
//from "f.cpp" import int print(int&&)
//from "f.cpp" import int print(int,char,string)
//
//print "end test import"
//print "end test import","blah"
//print "blah",p,"blah"
//
//
////print
//print test //68
//show test //type : int, value : 68
//
//
////run
//run p(42) //synchon
//run p(i) //synchon
//run p(test) //synchon
//run p(1) as thread_p //asynchone
//
//thread_p.join() //synchonisation
//
//run p(2) as thread_p //asynchone
//thread_p.detach() //relase it
//
//delete thread_p
//
//run p(3) as detached //asynchone
//
//
////compilation
//compile "f.cpp" as libf
//from libf import int print
//
//compile "f.cpp", "f.cpp" as libf2
//
//compile "f.cpp", "f.cpp" with flags("o3","Wall") as libf3
//
//compile "f.cpp", "f.cpp" with flags("o3","Wall") link(p) as libf4
//
//compile "127.0.0.1:8000/test.cpp" as libf5
//
////extern source
//wget "127.0.0.1:8000/test.cpp" as wget_file
//source "file.icpp"
//
//help
//
exit
